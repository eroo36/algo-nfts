{
  "openapi": "3.0.0",
  "paths": {
    "/nft": {
      "post": {
        "operationId": "NftController_mintNft",
        "summary": "Create an NFT",
        "description": "Currently only algorand-testnet is supported,",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintNftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created NFT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MintNftResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters sent"
          },
          "405": {
            "description": "Currently Mainnet is not available"
          }
        },
        "tags": [
          "nft"
        ]
      },
      "get": {
        "operationId": "NftController_getNft",
        "summary": "Find an NFT by assetId",
        "description": "Gets the details of an NFT by its assetId",
        "parameters": [
          {
            "name": "assetId",
            "required": true,
            "in": "query",
            "description": "ID of the asset/nft",
            "example": 86862666,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "query",
            "description": "The name of the asset/nft",
            "example": "algorand-testnet",
            "schema": {
              "enum": [
                "algorand-testnet",
                "algorand-mainnet"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found the NFT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNftResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        },
        "tags": [
          "nft"
        ]
      }
    }
  },
  "info": {
    "title": "Algo NFTs",
    "description": "An API for managing Algorand NFTs",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ARC69Metadata": {
        "type": "object",
        "properties": {
          "standard": {
            "type": "string",
            "description": "(Required) Describes the standard used.",
            "example": "ARC69"
          },
          "description": {
            "type": "string",
            "description": "Describes the asset to which this token represents.",
            "example": "A nice NFT description"
          },
          "external_url": {
            "type": "string",
            "description": "A URI pointing to an external website. Borrowed from Open Sea's metadata format (https://docs.opensea.io/docs/metadata-standards).\n\n      external_url is defined similarly to the Asset URL parameter au. However, contrary to the Asset URL, the external_url does not need to link to the digital media file.",
            "example": "https://nftstorage.link/ipfs/bafybeid4gwmvbza257a7rx52bheeplwlaogshu4rgse3eaudfkfm7tx2my/image.png"
          },
          "media_url": {
            "type": "string",
            "description": "A URI pointing to an image,video ex. Borrowed from Open Sea\"s metadata format (https://docs.opensea.io/docs/metadata-standards).",
            "example": "https://nftstorage.link/ipfs/bafybeid4gwmvbza257a7rx52bheeplwlaogshu4rgse3eaudfkfm7tx2my/image.png"
          },
          "properties": {
            "type": "object",
            "description": "Properties following the EIP-1155 \"simple properties\" format. (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema)"
          },
          "mime_type": {
            "type": "string",
            "description": "Describes the MIME type of the ASA`s URL (\"au\" field)"
          },
          "attributes": {
            "description": "Deprecated. New NFTs should define attributes with the simple `properties` object. Marketplaces should support both the `properties` object and the `attributes` array). The `attributes` array follows Open Sea\"s format: https://docs.opensea.io/docs/metadata-standards#attributes",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "standard",
          "description",
          "external_url",
          "media_url",
          "properties",
          "mime_type",
          "attributes"
        ]
      },
      "MintNftDTO": {
        "type": "object",
        "properties": {
          "assetName": {
            "type": "string",
            "description": "The name of the asset/nft",
            "example": "AlgoKitten"
          },
          "unitName": {
            "type": "string",
            "description": "The name of the unit/token",
            "example": "AKNFT"
          },
          "metadata": {
            "description": "JSON object containing the metadata of the nft, standards for the metadata can be found on https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0069.md",
            "allOf": [
              {
                "$ref": "#/components/schemas/ARC69Metadata"
              }
            ]
          },
          "network": {
            "type": "string",
            "description": "The name of the asset/nft",
            "enum": [
              "algorand-testnet",
              "algorand-mainnet"
            ],
            "example": "algorand-testnet"
          }
        },
        "required": [
          "assetName",
          "unitName",
          "metadata",
          "network"
        ]
      },
      "MintNftResponseDTO": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "number",
            "description": "ID of the asset/nft",
            "example": 86862666
          },
          "algoAccount": {
            "type": "object",
            "description": "Algorand Account that has the NFT in it",
            "example": {
              "publicAddress": "CJAQ2O2SMRNI6TB53C36X2C2WDDC64XJ5IBGNQF3SR2NOXUKZH62WKQCEA",
              "mnemonicKey": "jaguar dinosaur mammal two small ..."
            }
          }
        },
        "required": [
          "assetId",
          "algoAccount"
        ]
      },
      "GetNftResponseDTO": {
        "type": "object",
        "properties": {
          "index": {
            "type": "number",
            "description": "ID of the asset/nft",
            "example": 86862666
          },
          "params": {
            "type": "object",
            "description": "Details of the asset",
            "example": {
              "creator": "ZW5AMTXITMRZJV7IZ7MZF6ISJ56HZ63SYBWVZQRIH4KBS26L22J74BX3HI",
              "decimals": 0,
              "default-frozen": false,
              "name": "test-nft",
              "name-b64": "dGVzdC1uZnQ=",
              "total": 1,
              "unit-name": "TNFT",
              "unit-name-b64": "VE5GVA==",
              "url": "https://ipfs.io/ipfs/QmbcqLtgWsB6E4PPwoKSYPJaM8c7EsjGLPn48owdRQWy42",
              "url-b64": "aHR0cHM6Ly9pcGZzLmlvL2lwZnMvUW1iY3FMdGdXc0I2RTRQUHdvS1NZUEphTThjN0VzakdMUG40OG93ZFJRV3k0Mg=="
            }
          }
        },
        "required": [
          "index",
          "params"
        ]
      }
    }
  }
}